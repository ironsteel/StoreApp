/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * AddOrderDialog.java
 *
 * Created on Mar 10, 2012, 10:53:37 PM
 */
package storeapp;

import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import javax.persistence.EntityManager;
import org.jdesktop.application.Action;
import storeapp.entity.CustomOrder;
import storeapp.entity.Customer;
import storeapp.entity.OrderDetail;
import storeapp.entity.Product;
import storeapp.entity.Seller;
import storeapp.session.UserSessionManager;
import storeapp.tablemodels.OrderDetailsTableModel;

/**
 *
 * @author dalev
 */
public class AddOrderDialog extends javax.swing.JDialog {

    private EntityManager entityManager;
    private List<Product> productList;
    private List<Customer> customerList;
    private List<OrderDetail> orderDetailsList;
    private OrderDetailsTableModel orderDetailsTableModel;
    private boolean customerOrderIsCreated = false;
    private CustomOrder newCustomOrder;

    /** Creates new form AddOrderDialog */
    public AddOrderDialog(java.awt.Frame parent, boolean modal) {
        super(parent, modal);
        initComponents();
        orderDetailsTableModel = new OrderDetailsTableModel();
        orderedProductsTable.setModel(orderDetailsTableModel);
        selectProductCombo.addActionListener(new ActionListener() {

            public void actionPerformed(ActionEvent e) {
                Product p = productList.get(selectProductCombo.getSelectedIndex());
                productUnitPriceField.setText(String.valueOf(p.getUnitPrice()));
                productQuantatyInStock.setText(String.valueOf(p.getInStock()));
            }
        });

    }

    public void initializeData() {
        selectCustomerCombo.removeAllItems();
        if (selectProductCombo.getItemCount() > 0) {
            selectProductCombo.removeAllItems();
        }
        populateDataForProductComboBox();
        populateDataForCustomerComboBox();
    }

    public void setEntityManager(EntityManager entityManager) {
        this.entityManager = entityManager;
    }

    private void populateDataForCustomerComboBox() {

        customerList = entityManager.createNamedQuery(Customer.getAll).getResultList();
        for (Customer c : customerList) {
            selectCustomerCombo.addItem(c.getNameCustomer());
        }
    }

    private void populateDataForProductComboBox() {
        productList = entityManager.createNamedQuery(Product.getAll).getResultList();
        for (Product p : productList) {
            selectProductCombo.addItem(p.getProductName());
        }
        if (productList != null || !productList.isEmpty()) {
            productUnitPriceField.setText(String.valueOf(productList.get(0).getUnitPrice()));
            productQuantatyInStock.setText(String.valueOf(productList.get(0).getInStock()));
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        selectCustomerLabel = new javax.swing.JLabel();
        selectCustomerCombo = new javax.swing.JComboBox();
        jScrollPane1 = new javax.swing.JScrollPane();
        orderedProductsTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        selectProductCombo = new javax.swing.JComboBox();
        productUnitPriceLabel = new javax.swing.JLabel();
        productUnitPriceField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        productQuantatyInStock = new javax.swing.JTextField();
        orderedQuantatyLabel = new javax.swing.JLabel();
        orderedQuantatyField = new javax.swing.JTextField();
        addToOrderButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        totalPriceField = new javax.swing.JTextField();
        saveAndCloseButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setName("Form"); // NOI18N

        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(storeapp.StoreApp.class).getContext().getResourceMap(AddOrderDialog.class);
        selectCustomerLabel.setText(resourceMap.getString("selectCustomerLabel.text")); // NOI18N
        selectCustomerLabel.setName("selectCustomerLabel"); // NOI18N

        selectCustomerCombo.setName("selectCustomerCombo"); // NOI18N

        jScrollPane1.setName("jScrollPane1"); // NOI18N

        orderedProductsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        orderedProductsTable.setName("orderedProductsTable"); // NOI18N
        jScrollPane1.setViewportView(orderedProductsTable);

        jLabel1.setText(resourceMap.getString("jLabel1.text")); // NOI18N
        jLabel1.setName("jLabel1"); // NOI18N

        jLabel2.setText(resourceMap.getString("jLabel2.text")); // NOI18N
        jLabel2.setName("jLabel2"); // NOI18N

        selectProductCombo.setName("selectProductCombo"); // NOI18N

        productUnitPriceLabel.setText(resourceMap.getString("productUnitPriceLabel.text")); // NOI18N
        productUnitPriceLabel.setName("productUnitPriceLabel"); // NOI18N

        productUnitPriceField.setText(resourceMap.getString("productUnitPriceField.text")); // NOI18N
        productUnitPriceField.setName("productUnitPriceField"); // NOI18N

        jLabel3.setText(resourceMap.getString("jLabel3.text")); // NOI18N
        jLabel3.setName("jLabel3"); // NOI18N

        productQuantatyInStock.setText(resourceMap.getString("productQuantatyInStock.text")); // NOI18N
        productQuantatyInStock.setName("productQuantatyInStock"); // NOI18N
        productQuantatyInStock.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                productQuantatyInStockActionPerformed(evt);
            }
        });

        orderedQuantatyLabel.setText(resourceMap.getString("orderedQuantatyLabel.text")); // NOI18N
        orderedQuantatyLabel.setName("orderedQuantatyLabel"); // NOI18N

        orderedQuantatyField.setText(resourceMap.getString("orderedQuantatyField.text")); // NOI18N
        orderedQuantatyField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        orderedQuantatyField.setName("orderedQuantatyField"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(storeapp.StoreApp.class).getContext().getActionMap(AddOrderDialog.class, this);
        addToOrderButton.setAction(actionMap.get("onAddOrder")); // NOI18N
        addToOrderButton.setText(resourceMap.getString("addToOrderButton.text")); // NOI18N
        addToOrderButton.setName("addToOrderButton"); // NOI18N

        jLabel4.setText(resourceMap.getString("jLabel4.text")); // NOI18N
        jLabel4.setName("jLabel4"); // NOI18N

        totalPriceField.setText(resourceMap.getString("totalPriceField.text")); // NOI18N
        totalPriceField.setName("totalPriceField"); // NOI18N

        saveAndCloseButton.setAction(actionMap.get("onSaveCustomerOrder")); // NOI18N
        saveAndCloseButton.setText(resourceMap.getString("saveAndCloseButton.text")); // NOI18N
        saveAndCloseButton.setName("saveAndCloseButton"); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(361, 361, 361))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(selectProductCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                                                .addComponent(selectCustomerLabel)
                                                .addGap(18, 18, 18)
                                                .addComponent(selectCustomerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                        .addGap(18, 18, 18)
                                        .addComponent(productUnitPriceLabel)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(productUnitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 55, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(18, 18, 18)
                                        .addComponent(jLabel3))
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(orderedQuantatyLabel)
                                        .addGap(10, 10, 10)
                                        .addComponent(orderedQuantatyField, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(addToOrderButton)))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(productQuantatyInStock, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(saveAndCloseButton)
                        .addGap(18, 18, 18)
                        .addComponent(jLabel4)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(totalPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(51, 51, 51))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(selectCustomerLabel)
                    .addComponent(selectCustomerCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(selectProductCombo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(productUnitPriceLabel)
                    .addComponent(productUnitPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(productQuantatyInStock, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(orderedQuantatyField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(addToOrderButton)
                    .addComponent(orderedQuantatyLabel))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(totalPriceField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(saveAndCloseButton)))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void productQuantatyInStockActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_productQuantatyInStockActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_productQuantatyInStockActionPerformed
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addToOrderButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable orderedProductsTable;
    private javax.swing.JTextField orderedQuantatyField;
    private javax.swing.JLabel orderedQuantatyLabel;
    private javax.swing.JTextField productQuantatyInStock;
    private javax.swing.JTextField productUnitPriceField;
    private javax.swing.JLabel productUnitPriceLabel;
    private javax.swing.JButton saveAndCloseButton;
    private javax.swing.JComboBox selectCustomerCombo;
    private javax.swing.JLabel selectCustomerLabel;
    private javax.swing.JComboBox selectProductCombo;
    private javax.swing.JTextField totalPriceField;
    // End of variables declaration//GEN-END:variables

    @Action
    public void onSaveCustomerOrder() {
        customerOrderIsCreated = false;
        orderDetailsTableModel.clear();
        orderDetailsTableModel.fireTableDataChanged();

        customerList.clear();
        productList.clear();
        setVisible(false);
    }

    @Action
    public void onAddOrder() {
        if (orderedQuantatyField.getText().isEmpty()) {
            return;
        }
        createCustomerOrderIfNotExists();

        String quantaty = orderedQuantatyField.getText().trim();

        Product p = productList.get(selectProductCombo.getSelectedIndex());
        OrderDetail od = new OrderDetail();
        od.setOrderQuantity(Double.parseDouble(quantaty));
        od.setProduct(p);
        od.setCustomOrder(newCustomOrder);

        entityManager.getTransaction().begin();
        entityManager.persist(od);
        entityManager.getTransaction().commit();
        orderDetailsTableModel.add(od);
        orderDetailsTableModel.fireTableDataChanged();
        orderedQuantatyField.setText("");
    }

    private void createCustomerOrderIfNotExists() {
        if (!customerOrderIsCreated) {
            newCustomOrder = new CustomOrder();
            newCustomOrder.setCustomer(customerList.get(selectCustomerCombo.getSelectedIndex()));
            Seller currentSeller = getCurrentLoggedInUser();
            newCustomOrder.setSeller(currentSeller);
            persistCustomerOrder(newCustomOrder);
            customerOrderIsCreated = true;
        }

    }

    private void persistCustomerOrder(CustomOrder co) {
        entityManager.getTransaction().begin();
        entityManager.persist(co);
        entityManager.getTransaction().commit();
    }

    private Seller getCurrentLoggedInUser() {
        return entityManager.find(Seller.class, UserSessionManager.getSingleton().getUserId());
    }
}
